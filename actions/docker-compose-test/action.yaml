name: docker-compose-test
description: Testing with docker-compose
inputs:
  compose_file_path:
    description: The path to the compose file we're building (with trailing slash)
    type: string
    required: true

  compose_file_name:
    description: The name of the main compose file
    type: string
    required: true

  test_service_name:
    description: The name of the service to run during docker-compose run tests
    required: true
  
  additional_compose_test_files:
    description: A literal block scalar with the absolute path of additional compose files to utilize during the test step
    required: false

runs:
  using: "composite"
  steps:

    - name: context one
      shell: bash
      run: |
        pwd
        ls
        echo "${{ github.workspace }}"
        echo "$GITHUB_WORKSPACE"

    - name: Docker compose test
      shell: bash
      run: |
        additional_compose_command=""
        delimiter=" "
        declare -a array=(${{ inputs.additional_compose_test_files}})
        for element in "${array[@]}"; do additional_compose_command="$additional_compose_command -f "$element; done
        
        docker-compose -f ${{ inputs.compose_file_path }}${{ inputs.compose_file_name }} $additional_compose_command run --rm ${{ inputs.test_service_name }}

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        xunit_files: ${{ github.workspace }}/test-results/xunit/**/*.xml

    - name: context two
      if: always()
      shell: bash
      run: |
        pwd
        ls
    - name: Publish coverage results
      uses: irongut/CodeCoverageSummary@v1.2.0
      if: always()
      with:
        filename: ${{ github.workspace }}/test-results/coverage/coverage.xml
        format: markdown
        output: both
        badge: true
        fail_below_min: false
